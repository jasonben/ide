let g:coc_global_extensions = [
      \ '@yaegassy/coc-nginx',
      \ 'coc-go',
      \ 'coc-html',
      \ 'coc-htmlhint',
      \ 'coc-json',
      \ 'coc-prisma',
      \ 'coc-sh',
      \ 'coc-snippets',
      \ 'coc-solargraph',
      \ 'coc-sqlfluff',
      \ 'coc-tailwindcss',
      \ 'coc-tsserver'
      \ ]

" Custom keymaps
" see also vim.coc
imap jk <Esc>
tnoremap jk <C-\><C-n>
nnoremap /  <Plug>(incsearch-forward)
vnoremap . :norm.<CR>
nnoremap <leader>1 1gt
nnoremap <leader>2 2gt
nnoremap <leader>3 3gt
nnoremap <leader>4 4gt
nnoremap <leader>5 5gt
nnoremap <leader>6 6gt
nnoremap <leader>7 7gt
nnoremap <leader>8 8gt
nnoremap <leader>9 9gt
nnoremap <leader>0 :tablast<cr>
" prevent clobbering your yanked content that you wish to paste multiple times.
xnoremap p "_dP
"/ Custom keymaps

" Leader hotkeys
let mapleader = ','
let g:vim_javascript_imports_map = '<leader>e'
nmap <silent> <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>
nnoremap <leader>rr  :TabooRename<Space>
nnoremap <leader>c  :tabnew<CR>
nnoremap <leader>f  :ALEFix<CR>
nnoremap <leader>rm :call delete(expand('%')) \| bdelete!<CR>
nnoremap <leader>d :NERDTreeToggle<CR>
nnoremap <leader>g :GitGutterToggle<CR>
nnoremap <leader>. :TagbarToggle<CR>
nnoremap <leader>b :Buffers!<CR>
nnoremap <leader>t :Files!<CR>
nnoremap <leader>r :Tags<CR>
nnoremap <leader>h :History!<CR>
nnoremap <leader>hc :History:!<CR>
nnoremap <leader>hs :History/!<CR>
nnoremap <leader>w :Windows!<CR>
nnoremap <leader>rg :Rg!<CR>
nnoremap <leader>sl :call SyntaxRange#Include('#@begin=slim@', '#@end=slim@', 'slim', 'NonText')<CR>
"/ Leader hotkeys

let g:airline_powerline_fonts = 1
let g:deoplete#enable_at_startup = 1
let g:gitgutter_enabled = 1
let g:ide_tmux_socket = $HOME . "/.host_tmux_socket"
let g:jsx_ext_required = 0
let g:LanguageClient_useVirtualText = 0
let g:NERDSpaceDelims = 1
let g:NERDTreeShowHidden = 1
let g:multi_cursor_next_key = '<C-n>'
let g:multi_cursor_prev_key = '<C-p>'
let g:multi_cursor_quit_key = '<Esc>'
let g:multi_cursor_skip_key = '<C-x>'
let g:shfmt_fmt_on_save = 0
let g:slime_default_config = {"socket_name": ide_tmux_socket, "target_pane": "{last}"}
let g:slime_dont_ask_default = 1
let g:slime_target = "tmux"

" ale
let g:ale_enable_lsp = 0
let g:ale_enabled = 1
let g:ale_fix_on_save = 0
let g:ale_lint_on_enter = 1
let g:ale_lint_on_text_changed = 'always'
let g:ale_linters_explicit = 1
let g:ale_ruby_rubocop_options = '-a'
let g:ale_set_balloons=1
let g:ale_set_highlights = 0
let g:ale_set_loclist = 1
let g:ale_sign_column_always = 1
let g:ale_sign_error = 'X'
let g:ale_virtualtext_cursor=0
let g:ale_warn_about_trailing_whitespace = 0

let g:ale_fixers = {}
let g:ale_fixers['*'] = ['remove_trailing_lines', 'trim_whitespace']
let g:ale_fixers['angular'] = ['prettier']
let g:ale_fixers['css'] = ['prettier']
let g:ale_fixers['dockerfile'] = ['prettier']
let g:ale_fixers['erb'] = ['prettier']
let g:ale_fixers['go'] = ['gofmt']
let g:ale_fixers['graphql'] = ['prettier']
let g:ale_fixers['html'] = ['prettier']
let g:ale_fixers['javascript'] = ['prettier']
let g:ale_fixers['javascript.jsx'] = ['prettier']
let g:ale_fixers['jinja'] = ['prettier']
let g:ale_fixers['json'] = ['prettier']
let g:ale_fixers['jsx'] = ['prettier']
let g:ale_fixers['less'] = ['prettier']
let g:ale_fixers['markdown'] = ['prettier']
let g:ale_fixers['python'] = ['black']
let g:ale_fixers['ruby'] = ['standardrb']
let g:ale_fixers['rust'] = ['rustfmt']
let g:ale_fixers['scss'] = ['prettier']
let g:ale_fixers['sh'] = ['prettier']
let g:ale_fixers['sql'] = ['prettier']
let g:ale_fixers['typescript'] = ['prettier']
let g:ale_fixers['typescriptreact'] = ['prettier']
let g:ale_fixers['vue'] = ['prettier']
let g:ale_fixers['yaml'] = ['prettier']

let g:ale_linters = {}
let g:ale_linters['python'] = ['flake8', 'pylint']
let g:ale_linters['ruby'] = ['rubocop']
let g:ale_linters['sh'] = ['shellcheck']
let g:ale_linters['dockerfile'] = ['hadolint']
let g:ale_dockerfile_hadolint_use_docker='yes'
"/ ale

" base16 shell integration
if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

call deoplete#custom#option('sources', {
\ '_': ['ale'],
\})

" https://github.com/Shougo/deoplete.nvim/blob/master/doc/deoplete.txt#L1568
function g:Multiple_cursors_before()
  call deoplete#custom#buffer_option('auto_complete', v:false)
endfunction
function g:Multiple_cursors_after()
  call deoplete#custom#buffer_option('auto_complete', v:true)
endfunction

" Ultisnips
" let g:UltiSnipsExpandTrigger="<tab>"
" let g:UltiSnipsJumpForwardTrigger="<C-n>"
" let g:UltiSnipsJumpBackwardTrigger="<C-m>"

let g:fzf_colors =
\ { 'fg':         ['fg', 'Normal'],
  \ 'bg':         ['bg', 'Normal'],
  \ 'preview-bg': ['bg', 'NormalFloat'],
  \ 'hl':         ['fg', 'Comment'],
  \ 'fg+':        ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':        ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':        ['fg', 'Statement'],
  \ 'info':       ['fg', 'PreProc'],
  \ 'border':     ['fg', 'Ignore'],
  \ 'prompt':     ['fg', 'Conditional'],
  \ 'pointer':    ['fg', 'Exception'],
  \ 'marker':     ['fg', 'Keyword'],
  \ 'spinner':    ['fg', 'Label'],
  \ 'header':     ['fg', 'Comment'] }

set title
set showtabline=2                                            " always show tab bar
set tags=./.git/ctags
set number                                                   " show line numbers
set autoread                                                 " reload files when changed on disk, i.e. via `git checkout`
set autoindent
set backspace=2                                              " Fix broken backspace in some setups
" set backupcopy=yes
set clipboard=unnamed                                        " yank and paste with the system clipboard
set directory-=.                                             " don't store swapfiles in the current directory
set encoding=utf-8
set ignorecase                                               " case-insensitive search
set incsearch                                                " search as you type
set laststatus=2                                             " always show statusline
set list                                                     " show trailing whitespace
set listchars=tab:▸\ ,trail:▫
set ruler                                                    " show where you are
set scrolloff=3                                              " show context above/below cursorline
set showcmd
set smartcase                                                " case-sensitive search if any caps
set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc
"set wildmenu                                                 " show a navigable menu for tab completion
"set wildmode=longest,list,full
set nospell
set mouse=a
set foldmethod=indent
set foldlevel=1
set foldclose=all
